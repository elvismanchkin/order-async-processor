version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: order-processor-postgres
    environment:
      POSTGRES_DB: orders_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - order-network

  # Order Processor Application
  order-processor:
    build: .
    container_name: order-processor-app
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_R2DBC_HOST: postgres
      SPRING_R2DBC_PORT: 5432
      SPRING_R2DBC_DATABASE: orders_db
      SPRING_R2DBC_USERNAME: postgres
      SPRING_R2DBC_PASSWORD: postgres
      SPRING_PROFILES_ACTIVE: docker
      SERVICE_EXTERNAL_URL: http://external-service:8081
      JAVA_OPTS: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0"
      DATA_GENERATOR_ENABLED: "true"
      DATA_GENERATOR_INTERVAL: "15000"
    command: >
      sh -c "while ! pg_isready -h postgres -p 5432; do sleep 1; done && java -jar /app.jar"
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - order-network

  # Mock External Service (for local testing)
  external-service:
    image: wiremock/wiremock:latest
    container_name: order-processor-external-service
    ports:
      - "8081:8080"
    volumes:
      - ./wiremock:/home/wiremock
    command:
      - "--verbose"
      - "--global-response-templating"
    networks:
      - order-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: order-processor-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - order-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: order-processor-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/etc/grafana/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - order-network

  # PgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: order-processor-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - order-network

networks:
  order-network:
    driver: bridge

volumes:
  postgres-data:
  prometheus-data:
  grafana-data:
  pgadmin-data: